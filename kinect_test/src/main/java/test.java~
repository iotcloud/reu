import net.jpountz.lz4.*;
import java.io.*;

public class test {
    public static void main(String[] args) {
	LZ4Factory factory = LZ4Factory.fastestInstance();
	
	byte[] data = "12345345234572".getBytes("UTF-8");
	final int decompressedLength = data.length;
	try {
	    FileOutputStream outOld = new FileOutputStream("Traw_depth");
	    outOld.write(data);
	    outOld.close();
	} catch (IOException e) {
	    System.exit(0);
	}
	// compress data
	LZ4Compressor compressor = factory.fastCompressor();
	int maxCompressedLength = compressor.maxCompressedLength(decompressedLength);
	byte[] compressed = new byte[maxCompressedLength];
	int compressedLength = compressor.compress(data, 0, decompressedLength, compressed, 0, maxCompressedLength);
	try {
	    FileOutputStream outComp = new FileOutputStream("compressed_depth");
	    outComp.write(compressed);
	    outComp.close();
	} catch (IOException e) {
	    System.exit(0);
	}
	// decompress data
	// - method 1: when the decompressed length is known
	LZ4FastDecompressor decompressor = factory.fastDecompressor();
	byte[] restored = new byte[decompressedLength];
	int compressedLength2 = decompressor.decompress(compressed, 0, restored, 0, decompressedLength);
	// compressedLength == compressedLength2
	
	// - method 2: when the compressed length is known (a little slower)
	// the destination buffer needs to be over-sized
	LZ4SafeDecompressor decompressor2 = factory.safeDecompressor();
	int decompressedLength2 = decompressor2.decompress(compressed, 0, compressedLength, restored, 0);
	// decompressedLength == decompressedLength2
    }
}